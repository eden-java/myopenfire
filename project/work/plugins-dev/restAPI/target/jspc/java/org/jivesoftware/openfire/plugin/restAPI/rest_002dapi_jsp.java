/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2017-03-12 07:54:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.jivesoftware.openfire.plugin.restAPI;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import org.jivesoftware.openfire.XMPPServer;
import org.jivesoftware.util.*;
import org.jivesoftware.openfire.plugin.rest.RESTServicePlugin;
import org.jivesoftware.openfire.container.Plugin;
import org.jivesoftware.openfire.container.PluginManager;

public final class rest_002dapi_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/D:/java_project/company/openfire_src_4_1_3/build/lib/merge/org.apache.taglibs.taglibs-standard-impl.jar!/META-INF/c.tld", Long.valueOf(1384339662000L));
    _jspx_dependants.put("jar:file:/D:/java_project/company/openfire_src_4_1_3/build/lib/merge/org.apache.taglibs.taglibs-standard-impl.jar!/META-INF/fmt.tld", Long.valueOf(1384339662000L));
    _jspx_dependants.put("file:/D:/java_project/company/openfire_src_4_1_3/build/lib/merge/org.apache.taglibs.taglibs-standard-impl.jar", Long.valueOf(1487939628000L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n\n\n\n\n");
      out.write('\n');
      org.jivesoftware.util.WebManager admin = null;
      admin = (org.jivesoftware.util.WebManager) _jspx_page_context.getAttribute("admin", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (admin == null){
        admin = new org.jivesoftware.util.WebManager();
        _jspx_page_context.setAttribute("admin", admin, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\n');
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write('\n');

	admin.init(request, response, session, application, out);

      out.write('\n');
      out.write('\n');

	// Get parameters
	boolean save = request.getParameter("save") != null;
	boolean success = request.getParameter("success") != null;
	String secret = ParamUtils.getParameter(request, "secret");
	boolean enabled = ParamUtils.getBooleanParameter(request, "enabled");
	String httpAuth = ParamUtils.getParameter(request, "authtype");
	String allowedIPs = ParamUtils.getParameter(request, "allowedIPs");
	String customAuthFilterClassName = ParamUtils.getParameter(request, "customAuthFilterClassName");
	
	String loadingStatus = null;
	
	final PluginManager pluginManager = admin.getXMPPServer().getPluginManager();
	
	RESTServicePlugin plugin = (RESTServicePlugin) XMPPServer.getInstance().getPluginManager()
			.getPlugin("restapi");

	// Handle a save
	Map errors = new HashMap();
	if (save) {
		if("custom".equals(httpAuth)) {
			loadingStatus = plugin.loadAuthenticationFilter(customAuthFilterClassName);
		}
		if (loadingStatus != null) {
            errors.put("loadingStatus", loadingStatus);
		}
		
		if (errors.size() == 0) {
			
			boolean is2Reload = "custom".equals(httpAuth) || "custom".equals(plugin.getHttpAuth());
			plugin.setEnabled(enabled);
			plugin.setSecret(secret);
			plugin.setHttpAuth(httpAuth);
			plugin.setAllowedIPs(StringUtils.stringToCollection(allowedIPs));
			plugin.setCustomAuthFiIterClassName(customAuthFilterClassName);
			
			if(is2Reload) {
				String pluginName  = pluginManager.getName(plugin);
				String pluginDir = pluginManager.getPluginDirectory(plugin).getName();
				pluginManager.reloadPlugin(pluginDir);
            
				// Log the event
				admin.logEvent("reloaded plugin "+ pluginName, null);
				response.sendRedirect("/plugin-admin.jsp?reloadsuccess=true");
            }
			response.sendRedirect("rest-api.jsp?success=true");
			return;
		}
	}

	secret = plugin.getSecret();
	enabled = plugin.isEnabled();
	httpAuth = plugin.getHttpAuth();
	allowedIPs = StringUtils.collectionToString(plugin.getAllowedIPs());
	customAuthFilterClassName = plugin.getCustomAuthFilterClassName();

      out.write("\n\n<html>\n<head>\n<title>REST API Properties</title>\n<meta name=\"pageID\" content=\"rest-api\" />\n</head>\n<body>\n\n\t<p>Use the form below to enable or disable the REST API and\n\t\tconfigure the authentication.</p>\n\n\t");

		if (success) {
	
      out.write("\n\n\t<div class=\"jive-success\">\n\t\t<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"jive-icon\"><img src=\"images/success-16x16.gif\"\n\t\t\t\t\t\twidth=\"16\" height=\"16\" border=\"0\"></td>\n\t\t\t\t\t<td class=\"jive-icon-label\">REST API properties edited\n\t\t\t\t\t\tsuccessfully.</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t<br>\n\t");

		}
	
      out.write("\n\t\n\t");
  
		if (errors.get("loadingStatus") != null) { 
	
      out.write("\n\t<div class=\"jive-error\">\n\t\t<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"jive-icon\"><img src=\"images/error-16x16.gif\"\n\t\t\t\t\t\twidth=\"16\" height=\"16\" border=\"0\"></td>\n\t\t\t\t\t<td class=\"jive-icon-label\">");
      out.print( loadingStatus );
      out.write("</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t<br>\n\t");

		}
	
      out.write("\n\t<form action=\"rest-api.jsp?save\" method=\"post\">\n\n\t\t<fieldset>\n\t\t\t<legend>REST API</legend>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\tThe REST API can be secured with a shared secret key defined below\n\t\t\t\t\tor a with HTTP basic authentication.<br />Moreover, for extra\n\t\t\t\t\tsecurity you can specify the list of IP addresses that are allowed\n\t\t\t\t\tto use this service.<br />An empty list means that the service can\n\t\t\t\t\tbe accessed from any location. Addresses are delimited by commas.\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<input type=\"radio\" name=\"enabled\" value=\"true\" id=\"rb01\"\n\t\t\t\t\t\t");
      out.print(((enabled) ? "checked" : ""));
      out.write(">\n\t\t\t\t\t<label for=\"rb01\"><b>Enabled</b> - REST API requests will\n\t\t\t\t\t\tbe processed.</label>\n\t\t\t\t\t<br>\n\t\t\t\t\t<input type=\"radio\" name=\"enabled\" value=\"false\" id=\"rb02\"\n\t\t\t\t\t\t");
      out.print(((!enabled) ? "checked" : ""));
      out.write(">\n\t\t\t\t\t<label for=\"rb02\"><b>Disabled</b> - REST API requests will\n\t\t\t\t\t\tbe ignored.</label>\n\t\t\t\t\t<br>\n\t\t\t\t\t<br>\n\n\t\t\t\t\t<input type=\"radio\" name=\"authtype\" value=\"basic\"\n\t\t\t\t\t\tid=\"http_basic_auth\" ");
      out.print(("basic".equals(httpAuth) ? "checked" : ""));
      out.write(">\n\t\t\t\t\t<label for=\"http_basic_auth\">HTTP basic auth - REST API\n\t\t\t\t\t\tauthentication with Openfire admin account.</label>\n\t\t\t\t\t<br>\n\t\t\t\t\t<input type=\"radio\" name=\"authtype\" value=\"secret\"\n\t\t\t\t\t\tid=\"secretKeyAuth\" ");
      out.print(("secret".equals(httpAuth) ? "checked" : ""));
      out.write(">\n\t\t\t\t\t<label for=\"secretKeyAuth\">Secret key auth - REST API\n\t\t\t\t\t\tauthentication over specified secret key.</label>\n\t\t\t\t\t<br>\n\t\t\t\t\t<label style=\"padding-left: 25px\" for=\"text_secret\">Secret\n\t\t\t\t\t\tkey:</label>\n\t\t\t\t\t<input type=\"text\" name=\"secret\" value=\"");
      out.print(secret);
      out.write("\"\n\t\t\t\t\t\tid=\"text_secret\">\n\t\t\t\t\t<br>\n\t\t\t\t\t<input type=\"radio\" name=\"authtype\" value=\"custom\"\n\t\t\t\t\t\tid=\"customFilterAuth\" ");
      out.print(("custom".equals(httpAuth) ? "checked" : ""));
      out.write(">\n\t\t\t\t\t<label for=\"secretKeyAuth\">Custom authentication filter classname - REST API\n\t\t\t\t\t\tauthentication delegates to a custom filter implemented in some other plugin.\n\t\t\t\t\t</label>\n\t\t\t\t\t<div style=\"margin-left: 20px; margin-top: 5px;\"><strong>Note: changing back and forth from custom authentication filter forces the REST API plugin reloading</strong></div>\n\t\t\t\t\t<label style=\"padding-left: 25px\" for=\"text_secret\">Filter \n\t\t\t\t\t\tclassname:</label>\n\t\t\t\t\t<input type=\"text\" name=\"customAuthFilterClassName\" value=\"");
      out.print( customAuthFilterClassName );
      out.write("\"\n\t\t\t\t\t\tid=\"custom_auth_filter_class_name\" style=\"width:70%;padding:4px;\">\n\t\t\t\t\t<br>\n\t\t\t\t\t<br>\n\n\t\t\t\t\t<label for=\"allowedIPs\">Allowed IP Addresses:</label>\n\t\t\t\t\t<textarea name=\"allowedIPs\" cols=\"40\" rows=\"3\" wrap=\"virtual\">");
      out.print(((allowedIPs != null) ? allowedIPs : ""));
      out.write("</textarea>\n\t\t\t\t</ul>\n\n\t\t\t\t<p>You can find here detailed documentation over the Openfire REST API: \n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"/plugin-admin.jsp?plugin=restapi&showReadme=true&decorator=none\">REST\n\t\t\t\t\t\tAPI Documentation</a>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</fieldset>\n\n\t\t<br> <br> <input type=\"submit\" value=\"Save Settings\">\n\t</form>\n\n\n</body>\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fset_005f0.setParent(null);
    // /rest-api.jsp(14,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setVar("admin");
    // /rest-api.jsp(14,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/rest-api.jsp(14,0) '${admin.manager}'",_el_expressionfactory.createValueExpression(_jspx_page_context.getELContext(),"${admin.manager}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
    if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
    return false;
  }
}
